{"version":3,"sources":["components/CompleteNavbar/index.js","components/Menus/Appetizers/index.js","components/Menus/Sides/index.js","components/Menus/Main/index.js","components/Menus/Drinks/index.js","pages/foh.js","components/NumPad/index.js","pages/login.js","App.js","serviceWorker.js","index.js"],"names":["CompleteNavbar","enableMenu","Row","Col","xs","Button","variant","onClick","Appetizers","props","item","name","cost","desc","addArrayItem","handleClick","Sides","Main","Drinks","FoH","useState","display","toggleSides","setToggleSides","toggleAppetizers","setToggleAppetizers","toggleMain","setToggleMain","toggleDrinks","setToggleDrinks","disableAll","Order","orderState","setOrder","addToArray","inputObject","foodItem","concat","menu","console","log","Card","style","map","row","NumPad","ButtonGroup","vertical","Form","Group","controlId","Control","autoFocus","type","placeholder","value","pin","onChange","e","setPin","target","onKeyDown","formInput","buttons","rows","index","key","button","buttonIndex","delete","submit","buttonInput","Login","length","pinStr","slice","event","preventDefault","className","Container","id","App","to","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"wVAyBeA,MArBf,YAAyC,IAAfC,EAAc,EAAdA,WAExB,OACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,GAAI,IACT,kBAACD,EAAA,EAAD,KACE,kBAACE,EAAA,EAAD,CAAQA,QAAM,EAACC,QAAQ,kBAAkBC,QAAS,kBAAMN,EAAW,gBAAnE,iBAEF,kBAACE,EAAA,EAAD,KACE,kBAACE,EAAA,EAAD,CAAQC,QAAQ,kBAAkBC,QAAS,kBAAMN,EAAW,UAA5D,WAEF,kBAACE,EAAA,EAAD,KACE,kBAACE,EAAA,EAAD,CAAQC,QAAQ,kBAAkBC,QAAS,kBAAMN,EAAW,WAA5D,UAEF,kBAACE,EAAA,EAAD,KACE,kBAACE,EAAA,EAAD,CAAQC,QAAQ,kBAAkBC,QAAS,kBAAMN,EAAW,YAA5D,aCKOO,MArBf,SAAoBC,GAChB,IAEMC,EAAO,CACTC,KAAM,SACNC,KAAM,OACNC,KAAM,mCAIV,OACI,oCACI,kBAACX,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACE,EAAA,EAAD,CAAQC,QAAQ,YAAYC,QAAS,YAbjC,SAACG,GAAWD,EAAMK,aAAaJ,GAaUK,CAAYL,KAAzD,cCwBLM,MAtCf,SAAeP,GACX,IAAMM,EAAc,SAACL,GAAWD,EAAMK,aAAaJ,IAE7CA,EAAO,CACTC,KAAM,QACNC,KAAM,OACNC,KAAM,qBAIV,OACI,oCACI,kBAACX,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACE,EAAA,EAAD,CAAQC,QAAQ,YAAYC,QAAS,WAAQQ,EAAYL,KAAzD,UAEJ,kBAACP,EAAA,EAAD,KACI,kBAACE,EAAA,EAAD,CAAQC,QAAQ,YAAYC,QAAS,WAAQQ,EAAYL,KAAzD,UAEJ,kBAACP,EAAA,EAAD,KACI,kBAACE,EAAA,EAAD,CAAQC,QAAQ,YAAYC,QAAS,WAAQQ,EAAYL,KAAzD,WAGR,kBAACR,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACE,EAAA,EAAD,CAAQC,QAAQ,YAAYC,QAAS,WAAQQ,EAAYL,KAAzD,UAEJ,kBAACP,EAAA,EAAD,KACI,kBAACE,EAAA,EAAD,CAAQC,QAAQ,YAAYC,QAAS,WAAQQ,EAAYL,KAAzD,UAEJ,kBAACP,EAAA,EAAD,KACI,kBAACE,EAAA,EAAD,CAAQC,QAAQ,YAAYC,QAAS,WAAQQ,EAAYL,KAAzD,aCOLO,MAtCf,SAAcR,GACV,IAAMM,EAAc,SAACL,GAAWD,EAAMK,aAAaJ,IAE7CA,EAAO,CACTC,KAAM,OACNC,KAAM,QACNC,KAAM,oBAIV,OACI,oCACI,kBAACX,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACE,EAAA,EAAD,CAAQC,QAAQ,YAAYC,QAAS,WAAQQ,EAAYL,KAAzD,SAEJ,kBAACP,EAAA,EAAD,KACI,kBAACE,EAAA,EAAD,CAAQC,QAAQ,YAAYC,QAAS,WAAQQ,EAAYL,KAAzD,SAEJ,kBAACP,EAAA,EAAD,KACI,kBAACE,EAAA,EAAD,CAAQC,QAAQ,YAAYC,QAAS,WAAQQ,EAAYL,KAAzD,UAGR,kBAACR,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACE,EAAA,EAAD,CAAQC,QAAQ,aAAhB,YAEJ,kBAACH,EAAA,EAAD,KACI,kBAACE,EAAA,EAAD,CAAQC,QAAQ,aAAhB,YAEJ,kBAACH,EAAA,EAAD,KACI,kBAACE,EAAA,EAAD,CAAQC,QAAQ,aAAhB,eCVLY,MArBf,SAAgBT,GACZ,IAEMC,EAAO,CACTC,KAAM,QACNC,KAAM,OACNC,KAAM,sBAIV,OACI,oCACI,kBAACX,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACE,EAAA,EAAD,CAAQC,QAAQ,YAAYC,QAAS,YAbjC,SAACG,GAAWD,EAAMK,aAAaJ,GAaUK,CAAYL,KAAzD,c,QCmHLS,MA3Hf,WAAgB,IAAD,EAE2BC,mBAAS,CAC3CC,QAAS,SAHF,mBAEJC,EAFI,KAESC,EAFT,OAKqCH,mBAAS,CACrDC,QAAS,SANF,mBAKJG,EALI,KAKcC,EALd,OAQyBL,mBAAS,CACzCC,QAAS,SATF,mBAQJK,EARI,KAQQC,EARR,OAW6BP,mBAAS,CAC7CC,QAAS,SAZF,mBAWJO,EAXI,KAWUC,EAXV,KAeX,SAASC,IACLP,EAAe,CAAEF,QAAS,SAC1BI,EAAoB,CAAEJ,QAAS,SAC/BM,EAAc,CAAEN,QAAS,SACzBQ,EAAgB,CAAER,QAAS,SAnBpB,MAmDoBD,mBAAS,CAEpCW,MAAO,KArDA,mBAmDJC,EAnDI,KAmDQC,EAnDR,KAwDLC,EAAa,SAACC,GAChB,IAAIC,EAAW,CACXzB,KAAMwB,EAAYxB,KAClBC,KAAMuB,EAAYvB,KAClBC,KAAMsB,EAAYtB,MAKtBoB,EAAS,CAAEF,MAAM,YAAKC,EAAWD,MAAMM,OAAOD,OAUlD,OACI,6BACI,kBAAC,EAAD,CAAgBnC,WAtDxB,SAAoBqC,GACH,UAATA,GACAR,IACAP,EAAe,CAAEF,QAAS,iBAC1BkB,QAAQC,IAAI,CAAElB,iBAEL,eAATgB,GACAR,IACAL,EAAoB,CAAEJ,QAAS,iBAC/BkB,QAAQC,IAAI,CAAEhB,sBAGA,SAATc,GACLR,IACAH,EAAc,CAAEN,QAAS,iBACzBkB,QAAQC,IAAI,CAAEd,gBACE,WAATY,IACPR,IACAD,EAAgB,CAAER,QAAS,iBAC3BkB,QAAQC,IAAI,CAAEZ,qBAoCd,kBAAC1B,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAKC,GAAI,IACT,kBAACD,EAAA,EAAD,CAAKC,GAAI,GACL,kBAACqC,EAAA,EAAD,CAAMC,MAAOpB,GACT,kBAAC,EAAD,CAAOR,aAAcoB,KAEzB,kBAACO,EAAA,EAAD,CAAMC,MAAOlB,GACT,kBAAC,EAAD,CAAYV,aAAcoB,KAE9B,kBAACO,EAAA,EAAD,CAAMC,MAAOhB,GACT,kBAAC,EAAD,CAAMZ,aAAcoB,KAExB,kBAACO,EAAA,EAAD,CAAMC,MAAOd,GACT,kBAAC,EAAD,CAAQd,aAAcoB,MAG9B,kBAAC/B,EAAA,EAAD,CAAKC,GAAI,IACT,kBAACD,EAAA,EAAD,CAAKC,GAAI,GACL,kBAACqC,EAAA,EAAD,KACI,+BACKT,EAAWD,MAAMY,KAAI,SAAAC,GAAG,OACrB,+BACA,4BACI,4BACKA,EAAIjC,MAET,4BACKiC,EAAI/B,MAET,4BACK+B,EAAIhC,iB,8BC/G9B,SAASiC,EAAOpC,GAC7B,OACE,kBAACqC,EAAA,EAAD,CAAaC,UAAQ,GACnB,kBAACC,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKC,MAAN,CAAYC,UAAU,WACpB,kBAACF,EAAA,EAAKG,QAAN,CACEC,WAAS,EACTzC,KAAK,MACL0C,KAAK,WACLC,YAAY,YACZC,MAAO9C,EAAM+C,IACbC,SAAU,SAAAC,GAAC,OAAIjD,EAAMkD,OAAOD,EAAEE,OAAOL,QACrCM,UAAW,SAAAH,GAAC,OAAIjD,EAAMqD,UAAUJ,QAIrCjD,EAAMsD,QAAQpB,KAAI,SAACqB,EAAMC,GAAP,OACjB,kBAACnB,EAAA,EAAD,CAAaoB,IAAG,qBAAgBD,IAC7BD,EAAKrB,KAAI,SAACwB,EAAQC,GAAT,OACR,kBAAC/D,EAAA,EAAD,CACEC,QAAQ,oBACR4D,IAAG,uBAAkBE,GACrBb,MAAQY,EAAOZ,MAAsBY,EAAOZ,MAArBY,EAAOxD,KAC9BJ,QACE,QAAA4D,EAAOZ,MACH9C,EAAM4D,OACN,UAAAF,EAAOZ,MACP9C,EAAM6D,OACN,SAAAZ,GAAC,OAAIjD,EAAM8D,YAAYb,KAG5BS,EAAOxD,c,MCiBP6D,MA9Cf,WAAkB,IAAD,EACOpD,mBAAS,IADhB,mBACRoC,EADQ,KACHG,EADG,KAsBTlD,EAAQ,CACZ+C,IAAKA,EACLG,OAAQA,EACRU,OAhBmB,WACnB,GAAIb,EAAIiB,OAAS,EAAG,CAClB,IAAIC,EAASlB,EACbkB,EAASA,EAAOC,MAAM,GAAI,GAC1BhB,EAAOe,KAaTH,YAvBqB,SAAAK,GACrBA,EAAMC,iBADwB,IAEtBtB,EAAUqB,EAAMhB,OAAhBL,MACRI,EAAOH,EAAMD,IAqBbQ,QAVc,CACd,CAAC,CAACpD,KAAK,KAAM,CAACA,KAAK,KAAM,CAACA,KAAK,MAAO,CAAC,CAACA,KAAK,KAAM,CAACA,KAAK,KAAM,CAACA,KAAK,MAAO,CAAC,CAACA,KAAK,KAAM,CAACA,KAAK,KAAM,CAACA,KAAK,MAC3G,CAAC,CAACA,KAAM,uBAAGmE,UAAU,6BAAgCvB,MAAM,OAAQ,CAAC5C,KAAK,KAAM,CAACA,KAAM,uBAAGmE,UAAU,kCAAqCvB,MAAM,YAW9I,OACI,6BACA,kBAAC,EAAD,MAEA,kBAACwB,EAAA,EAAD,CAAWD,UAAU,mBAAmBE,GAAG,kBAC3C,kBAAC9E,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAK2E,UAAU,QACb,kBAACjC,EAAWpC,QCZTwE,MAzBf,WACE,OACE,kBAAC,IAAD,KACE,6BACE,kBAAC,IAAD,CAAMC,GAAG,QAAT,kBAEA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,KAChB,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,QACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,mBCTFC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/D,QAAQ+D,MAAMA,EAAMC,c","file":"static/js/main.c26f5f69.chunk.js","sourcesContent":["import React, { useState, Component } from 'react';\nimport { Button, Row, Col } from 'react-bootstrap';\n\n\nfunction CompleteNavbar({ enableMenu }) { \n\n  return (\n    <Row>\n      <Col xs={1}></Col>\n      <Col>\n        <Button Button variant=\"outline-success\" onClick={() => enableMenu(\"Appetizers\")}> Appetizers </Button>\n      </Col>\n      <Col>\n        <Button variant=\"outline-success\" onClick={() => enableMenu(\"Main\")} > Main </Button>\n      </Col>\n      <Col>\n        <Button variant=\"outline-success\" onClick={() => enableMenu(\"Sides\")} >Sides</Button>\n      </Col>\n      <Col>\n        <Button variant=\"outline-success\" onClick={() => enableMenu(\"Drinks\")} >Drinks</Button>\n      </Col>\n    </Row>\n  )\n}\n\nexport default CompleteNavbar;\n","import React from 'react';\nimport { Row, Col, Card, Button } from 'react-bootstrap';\n\nfunction Appetizers(props) {\n    const handleClick = (item) => { props.addArrayItem(item) }\n\n    const item = {\n        name: \"Nachos\",\n        cost: \"3.55\",\n        desc: \"Coming from Appetizers/index.js\"\n    }\n    // ^ This probably needs to be an array and then do a DB call to import button names\n\n    return (\n        <>\n            <Row>\n                <Col>\n                    <Button variant=\"secondary\" onClick={() => { handleClick(item) }}>Nachos</Button>\n                </Col>\n            </Row>\n        </>\n    )\n}\n\nexport default Appetizers;","import React from 'react';\nimport { Row, Col, Card, Button } from 'react-bootstrap';\n\nfunction Sides(props) {\n    const handleClick = (item) => { props.addArrayItem(item) }\n\n    const item = {\n        name: \"Sides\",\n        cost: \"1.00\",\n        desc: \"Coming from Sides\"\n    }\n        // ^ This probably needs to be an array and then do a DB call to import button names\n\n    return (\n        <>\n            <Row>\n                <Col>\n                    <Button variant=\"secondary\" onClick={() => { handleClick(item) }}>Sides</Button>\n                </Col>\n                <Col>\n                    <Button variant=\"secondary\" onClick={() => { handleClick(item) }}>Sides</Button>\n                </Col>\n                <Col>\n                    <Button variant=\"secondary\" onClick={() => { handleClick(item) }}>Sides</Button>\n                </Col>\n            </Row>\n            <Row>\n                <Col>\n                    <Button variant=\"secondary\" onClick={() => { handleClick(item) }}>Sides</Button>\n                </Col>\n                <Col>\n                    <Button variant=\"secondary\" onClick={() => { handleClick(item) }}>Sides</Button>\n                </Col>\n                <Col>\n                    <Button variant=\"secondary\" onClick={() => { handleClick(item) }}>Sides</Button>\n                </Col>\n            </Row>\n        </>\n    )\n}\n\nexport default Sides;","import React from 'react';\nimport { Row, Col, Card, Button } from 'react-bootstrap';\n\nfunction Main(props) {\n    const handleClick = (item) => { props.addArrayItem(item) }\n\n    const item = {\n        name: \"Main\",\n        cost: \"77.77\",\n        desc: \"Coming from main\"\n    }\n    // ^ This probably needs to be an array and then do a DB call to import button names\n\n    return (\n        <>\n            <Row>\n                <Col>\n                    <Button variant=\"secondary\" onClick={() => { handleClick(item) }}>Main</Button>\n                </Col>\n                <Col>\n                    <Button variant=\"secondary\" onClick={() => { handleClick(item) }}>Main</Button>\n                </Col>\n                <Col>\n                    <Button variant=\"secondary\" onClick={() => { handleClick(item) }}>Main</Button>\n                </Col>\n            </Row>\n            <Row>\n                <Col>\n                    <Button variant=\"secondary\">OldMain</Button>\n                </Col>\n                <Col>\n                    <Button variant=\"secondary\">OldMain</Button>\n                </Col>\n                <Col>\n                    <Button variant=\"secondary\">OldMain</Button>\n                </Col>\n            </Row>\n        </>\n    )\n}\n\nexport default Main;","import React from 'react';\nimport { Row, Col, Card, Button } from 'react-bootstrap';\n\nfunction Drinks(props) {\n    const handleClick = (item) => { props.addArrayItem(item) }\n\n    const item = {\n        name: \"Drink\",\n        cost: \"3.50\",\n        desc: \"Coming from Drinks\"\n    }\n    // ^ This probably needs to be an array and then do a DB call to import button names\n\n    return (\n        <>\n            <Row>\n                <Col>\n                    <Button variant=\"secondary\" onClick={() => { handleClick(item) }}>Drinks</Button>\n                </Col>\n            </Row>\n        </>\n    )\n}\n\nexport default Drinks;","import React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport CompleteNavbar from './../components/CompleteNavbar';\nimport Appetizers from './../components/Menus/Appetizers';\nimport Sides from './../components/Menus/Sides';\nimport Main from './../components/Menus/Main';\nimport Drinks from './../components/Menus/Drinks';\nimport { Row, Col, Card } from 'react-bootstrap';\n\nfunction FoH() {\n\n    const [toggleSides, setToggleSides] = useState({\n        display: \"none\"\n    });\n    const [toggleAppetizers, setToggleAppetizers] = useState({\n        display: \"none\"\n    });\n    const [toggleMain, setToggleMain] = useState({\n        display: \"none\"\n    });\n    const [toggleDrinks, setToggleDrinks] = useState({\n        display: \"none\"\n    });\n\n    function disableAll() {\n        setToggleSides({ display: \"none\" });\n        setToggleAppetizers({ display: \"none\" })\n        setToggleMain({ display: \"none\" })\n        setToggleDrinks({ display: \"none\" })\n    }\n        // This shows the menu options when you click a \"Menu Group\"\n        // enableMenu gets menu from CompleteNavbar buttons\n    function enableMenu(menu) {\n        if (menu === \"Sides\") {\n            disableAll();\n            setToggleSides({ display: \"inline-block\" });\n            console.log({ toggleSides })\n        } else \n        if (menu === \"Appetizers\") {\n            disableAll();\n            setToggleAppetizers({ display: \"inline-block\" });\n            console.log({ toggleAppetizers })\n\n        }\n        else if (menu === \"Main\") {\n            disableAll();\n            setToggleMain({ display: \"inline-block\" });\n            console.log({ toggleMain })\n        } else if (menu === \"Drinks\") {\n            disableAll();\n            setToggleDrinks({ display: \"inline-block\" });\n            console.log({ toggleDrinks })\n        }\n    }\n\n\n\n\n\n\n    const [orderState, setOrder] = useState({\n        // This will hold the clicked order items\n        Order: [],\n    });\n\n    const addToArray = (inputObject) => {\n        let foodItem = {\n            name: inputObject.name,\n            cost: inputObject.cost,\n            desc: inputObject.desc\n        };\n\n        // Look into .concat vs .push for Stateful components\n        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/concat\n        setOrder({ Order: [...orderState.Order.concat(foodItem)] })\n    };\n\n\n\n\n\n\n\n \n    return (\n        <div>\n            <CompleteNavbar enableMenu={enableMenu} />\n            <Row>\n                <Col xs={1}></Col>\n                <Col xs={6} >\n                    <Card style={toggleSides}>\n                        <Sides addArrayItem={addToArray} />\n                    </Card>\n                    <Card style={toggleAppetizers}>\n                        <Appetizers addArrayItem={addToArray} />\n                    </Card>\n                    <Card style={toggleMain}>\n                        <Main addArrayItem={addToArray} />\n                    </Card>\n                    <Card style={toggleDrinks}>\n                        <Drinks addArrayItem={addToArray} />\n                    </Card>\n                </Col>\n                <Col xs={1}></Col>\n                <Col xs={3}> \n                    <Card>\n                        <table>\n                            {orderState.Order.map(row => (\n                                <tbody>\n                                <tr>\n                                    <td>\n                                        {row.name}\n                                    </td>\n                                    <td>\n                                        {row.desc}\n                                    </td>\n                                    <td>\n                                        {row.cost}\n                                    </td>\n                                </tr>\n                                </tbody>\n                            ))}\n                        </table>\n                    </Card>\n                </Col>\n            </Row>\n\n\n        </div> \n    )\n}\n\nexport default FoH;","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\nimport Form from 'react-bootstrap/Form';\nimport './style.css';\n\nexport default function NumPad(props) {\n  return (\n    <ButtonGroup vertical>\n      <Form>\n        <Form.Group controlId='formPIN'>\n          <Form.Control\n            autoFocus\n            name='pin'\n            type='password'\n            placeholder='Enter PIN'\n            value={props.pin}\n            onChange={e => props.setPin(e.target.value)}\n            onKeyDown={e => props.formInput(e)}\n          />\n        </Form.Group>\n      </Form>\n      {props.buttons.map((rows, index) => (\n        <ButtonGroup key={`button-row-${index}`}>\n          {rows.map((button, buttonIndex) => (\n            <Button\n              variant='outline-secondary'\n              key={`button-index-${buttonIndex}`}\n              value={!button.value ? button.name : button.value}\n              onClick={\n                button.value === `del`\n                  ? props.delete\n                  : button.value === `login`\n                  ? props.submit\n                  : e => props.buttonInput(e)\n              }\n            >\n              {button.name}\n            </Button>\n          ))}\n        </ButtonGroup>\n      ))}\n    </ButtonGroup>\n  );\n}","import React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport CompleteNavbar from './../components/CompleteNavbar'\n\nimport { Col, Container, Row } from 'react-bootstrap';\nimport NumPad from './../components/NumPad';\nimport './loginstyle.css';\n \nfunction Login() {\n  const [pin, setPin] = useState(``);\n\n  const handleBtnInput = event => {\n    event.preventDefault();\n    const { value } = event.target;\n    setPin(pin + value);\n  };\n \n  const handleDelete = () => {\n    if (pin.length > 0) {\n      let pinStr = pin;\n      pinStr = pinStr.slice(0, -1);\n      setPin(pinStr);\n    }\n  };\n\n  const buttons = [\n    [{name: `1`},{name: `2`},{name: `3`}],[{name: `4`},{name: `5`},{name: `6`}],[{name: `7`},{name: `8`},{name: `9`}],\n    [{name: <i className='fas fa-backspace del-btn'></i>,value: `del`},{name: `0`},{name: <i className='fas fa-sign-in-alt submit-btn'></i>,value: `login`}]\n  ];\n\n  const props = {\n    pin: pin,\n    setPin: setPin,\n    delete: handleDelete,\n    buttonInput: handleBtnInput,\n    buttons: buttons\n  };\n\n    return(\n        <div>\n        <CompleteNavbar />\n        \n        <Container className='text-center mt-5' id='home-container'>\n        <Row>\n          <Col className='py-3'>\n            <NumPad {...props} />\n          </Col>\n        </Row>\n\n      </Container>\n      </div>\n    )\n};\n\nexport default Login;","import React from 'react';\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter as Router, Switch, useLocation, Route, Link } from \"react-router-dom\";\nimport './App.css';\n// import CompleteNavbar from './components/CompleteNavbar';\nimport FoH from './pages/foh'\nimport Login from './pages/login'\n\nfunction App() {\n  return (\n    <Router>\n      <div>\n        <Link to=\"/FoH\">Front of House</Link>\n\n        <Switch>\n          <Route exact path=\"/\">\n            <Login />\n          </Route> \n          <Route path=\"/FoH\">\n            <FoH />\n          </Route>\n          <Route path=\"/dashboard\">\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n\n  );\n\n\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}